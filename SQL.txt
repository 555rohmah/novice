Basis data
dari Wikipedia, ensiklopedia gratis
Langsung ke navigasiLangsung ke pencarian
Artikel ini berisi uraian tentang konsep komputasi. Untuk contoh konsep umum, lihat Daftar database .

Pernyataan pilih SQL dan hasilnya
Dalam komputasi , database adalah kumpulan terorganisir dari data yang disimpan dan diakses secara elektronik. Basis data kecil dapat disimpan di sistem file , sedangkan basis data besar disimpan di kluster komputer atau penyimpanan cloud . Desain basis data mencakup teknik formal dan pertimbangan praktis, termasuk pemodelan data , representasi dan penyimpanan data yang efisien, bahasa kueri , keamanan dan privasi data sensitif, dan masalah komputasi terdistribusi , termasuk mendukung akses konkuren dantoleransi kesalahan .

Sistem manajemen basis data ( DBMS ) adalah perangkat lunak yang berinteraksi dengan pengguna akhir , aplikasi, dan basis data itu sendiri untuk menangkap dan menganalisis data. Perangkat lunak DBMS juga mencakup fasilitas inti yang disediakan untuk mengelola database. Jumlah total database, DBMS dan aplikasi terkait dapat disebut sebagai sistem database. Seringkali istilah "database" juga digunakan secara longgar untuk merujuk ke salah satu DBMS, sistem database atau aplikasi yang terkait dengan database.

Ilmuwan komputer dapat mengklasifikasikan sistem manajemen basis data menurut model basis data yang mereka dukung. Database relasional menjadi dominan pada 1980-an. Data model ini sebagai baris dan kolom dalam serangkaian tabel , dan sebagian besar menggunakan SQL untuk menulis dan membuat kueri data. Pada tahun 2000-an, database non-relasional menjadi populer, secara kolektif disebut sebagai NoSQL , karena mereka menggunakan bahasa query yang berbeda .
Basis data
dari Wikipedia, ensiklopedia gratis
Langsung ke navigasiLangsung ke pencarian
Artikel ini berisi uraian tentang konsep komputasi. Untuk contoh konsep umum, lihat Daftar database .

Pernyataan pilih SQL dan hasilnya
Dalam komputasi , database adalah kumpulan terorganisir dari data yang disimpan dan diakses secara elektronik. Basis data kecil dapat disimpan di sistem file , sedangkan basis data besar disimpan di kluster komputer atau penyimpanan cloud . Desain basis data mencakup teknik formal dan pertimbangan praktis, termasuk pemodelan data , representasi dan penyimpanan data yang efisien, bahasa kueri , keamanan dan privasi data sensitif, dan masalah komputasi terdistribusi , termasuk mendukung akses konkuren dantoleransi kesalahan .

Sistem manajemen basis data ( DBMS ) adalah perangkat lunak yang berinteraksi dengan pengguna akhir , aplikasi, dan basis data itu sendiri untuk menangkap dan menganalisis data. Perangkat lunak DBMS juga mencakup fasilitas inti yang disediakan untuk mengelola database. Jumlah total database, DBMS dan aplikasi terkait dapat disebut sebagai sistem database. Seringkali istilah "database" juga digunakan secara longgar untuk merujuk ke salah satu DBMS, sistem database atau aplikasi yang terkait dengan database.

Ilmuwan komputer dapat mengklasifikasikan sistem manajemen basis data menurut model basis data yang mereka dukung. Database relasional menjadi dominan pada 1980-an. Data model ini sebagai baris dan kolom dalam serangkaian tabel , dan sebagian besar menggunakan SQL untuk menulis dan membuat kueri data. Pada tahun 2000-an, database non-relasional menjadi populer, secara kolektif disebut sebagai NoSQL , karena mereka menggunakan bahasa query yang berbeda .
Gunakan kasus
Database digunakan untuk mendukung operasi internal organisasi dan untuk mendukung interaksi online dengan pelanggan dan pemasok (lihat perangkat lunak Perusahaan ).

Basis data digunakan untuk menyimpan informasi administratif dan data yang lebih khusus, seperti data teknik atau model ekonomi. Contohnya termasuk sistem perpustakaan terkomputerisasi, sistem reservasi penerbangan , sistem inventaris suku cadang terkomputerisasi , dan banyak sistem manajemen konten yang menyimpan situs web sebagai kumpulan halaman web dalam database.

Klasifikasi
Salah satu cara untuk mengklasifikasikan database melibatkan jenis isinya, misalnya: bibliografi , dokumen-teks, statistik, atau objek multimedia. Cara lain adalah dengan bidang aplikasi mereka, misalnya: akuntansi, komposisi musik, film, perbankan, manufaktur, atau asuransi. Cara ketiga adalah dengan beberapa aspek teknis, seperti struktur database atau tipe antarmuka. Bagian ini mencantumkan beberapa kata sifat yang digunakan untuk mengkarakterisasi berbagai jenis database.

Basis data dalam memori adalah basis data yang terutama berada di memori utama , tetapi biasanya didukung oleh penyimpanan data komputer yang tidak mudah menguap. Basis data memori utama lebih cepat daripada basis data disk, dan sering digunakan di mana waktu respons sangat penting, seperti pada peralatan jaringan telekomunikasi.
Basis data aktif mencakup arsitektur yang digerakkan oleh peristiwa yang dapat merespons kondisi baik di dalam maupun di luar basis data. Kemungkinan penggunaan termasuk pemantauan keamanan, peringatan, pengumpulan statistik dan otorisasi. Banyak database menyediakan fitur database aktif dalam bentuk pemicu database .
Sebuah database awan bergantung pada teknologi awan . Baik database dan sebagian besar DBMS-nya berada dari jarak jauh, "di awan", sementara aplikasinya dikembangkan oleh pemrogram dan kemudian dipelihara dan digunakan oleh pengguna akhir melalui browser web dan Open API .
Data warehouse mengarsipkan data dari database operasional dan seringkali dari sumber eksternal seperti firma riset pasar. Gudang menjadi sumber pusat data untuk digunakan oleh manajer dan pengguna akhir lainnya yang mungkin tidak memiliki akses ke data operasional. Misalnya, data penjualan mungkin digabungkan ke total mingguan dan dikonversi dari kode produk internal untuk menggunakan UPC sehingga dapat dibandingkan dengan data ACNielsen . Beberapa komponen dasar dan penting dari data warehousing termasuk mengekstraksi, menganalisis, dan menambang data, mengubah, memuat, dan mengelola data sehingga membuatnya tersedia untuk digunakan lebih lanjut.
Database deduktif menggabungkan pemrograman logika dengan database relasional.
Basis data terdistribusi adalah basis data di mana data dan DBMS menjangkau banyak komputer.
Database berorientasi dokumen dirancang untuk menyimpan, mengambil, dan mengelola informasi berorientasi dokumen, atau semi terstruktur. Database berorientasi dokumen adalah salah satu kategori utama database NoSQL.
Sistem basis data tertanam adalah DBMS yang terintegrasi erat dengan perangkat lunak aplikasi yang memerlukan akses ke data yang disimpan sedemikian rupa sehingga DBMS tersembunyi dari pengguna akhir aplikasi dan memerlukan sedikit atau tanpa pemeliharaan berkelanjutan. [21]
Basis data pengguna akhir terdiri dari data yang dikembangkan oleh pengguna akhir individu. Contohnya adalah kumpulan dokumen, spreadsheet, presentasi, multimedia, dan file lainnya. Beberapa produk ada untuk mendukung database tersebut. Beberapa di antaranya jauh lebih sederhana daripada DBMS lengkap, dengan fungsionalitas DBMS yang lebih mendasar.
Sebuah sistem database federasi terdiri dari beberapa database yang berbeda, masing-masing dengan DBMS sendiri. Hal ini ditangani sebagai database tunggal oleh sistem manajemen database federasi (FDBMS), yang secara transparan mengintegrasikan beberapa DBMS otonom, mungkin dari jenis yang berbeda (dalam hal ini juga akan menjadi sistem database heterogen ), dan menyediakan mereka dengan pandangan konseptual yang terintegrasi. .
Kadang-kadang istilah multi-database digunakan sebagai sinonim untuk database federasi, meskipun mungkin merujuk pada kelompok database yang kurang terintegrasi (misalnya, tanpa FDBMS dan skema terintegrasi yang dikelola) yang bekerja sama dalam satu aplikasi. Dalam hal ini, biasanya middleware digunakan untuk distribusi, yang biasanya mencakup protokol commit atom (ACP), misalnya, protokol commit dua fase , untuk memungkinkan transaksi terdistribusi (global) di seluruh database yang berpartisipasi.
Database grafik adalah jenis database NoSQL yang menggunakan struktur grafik dengan node, tepi, dan properti untuk mewakili dan menyimpan informasi. Database grafik umum yang dapat menyimpan grafik apapun berbeda dari database grafik khusus seperti triplestore dan database jaringan .
Array DBMS adalah jenis DBMS NoSQL yang memungkinkan pemodelan, penyimpanan, dan pengambilan (biasanya besar) array multi-dimensi seperti citra satelit dan output simulasi iklim.
Dalam database hypertext atau hypermedia , setiap kata atau potongan teks yang mewakili suatu objek, misalnya, potongan teks lain, artikel, gambar, atau film, dapat di- hyperlink ke objek tersebut. Database hypertext sangat berguna untuk mengatur sejumlah besar informasi yang berbeda. Misalnya, mereka berguna untuk mengatur ensiklopedia online , di mana pengguna dapat dengan mudah melompati teks. Dengan demikian World Wide Web adalah database hypertext terdistribusi besar.
Basis pengetahuan (disingkat KB , kb atau [22] [23] ) adalah jenis basis data khusus untuk manajemen pengetahuan , yang menyediakan sarana untuk pengumpulan, pengorganisasian, dan pengambilan pengetahuan yang terkomputerisasi . Juga kumpulan data yang mewakili masalah dengan solusi mereka dan pengalaman terkait.
Basis data seluler dapat dijalankan atau disinkronkan dari perangkat komputasi seluler.
Database operasional menyimpan data rinci tentang operasi suatu organisasi. Mereka biasanya memproses pembaruan dengan volume yang relatif tinggi menggunakan transaksi . Contohnya termasuk database pelanggan yang mencatat kontak, kredit, dan informasi demografis tentang pelanggan bisnis, database personalia yang menyimpan informasi seperti gaji, tunjangan, data keterampilan tentang karyawan, sistem perencanaan sumber daya perusahaan yang mencatat rincian tentang komponen produk, persediaan suku cadang, dan keuangan. database yang melacak uang organisasi, akuntansi dan transaksi keuangan.
Basis data paralel berupaya meningkatkan kinerja melalui paralelisasi untuk tugas-tugas seperti memuat data, membangun indeks, dan mengevaluasi kueri.
Arsitektur DBMS paralel utama yang diinduksi oleh arsitektur perangkat keras yang mendasarinya adalah:
Arsitektur memori bersama , di mana beberapa prosesor berbagi ruang memori utama, serta penyimpanan data lainnya.
Arsitektur disk bersama , di mana setiap unit pemrosesan (biasanya terdiri dari beberapa prosesor) memiliki memori utamanya sendiri, tetapi semua unit berbagi penyimpanan lainnya.
Arsitektur shared-nothing , di mana setiap unit pemrosesan memiliki memori utama dan penyimpanan lainnya.
Database probabilistik menggunakan logika fuzzy untuk menarik kesimpulan dari data yang tidak tepat.
Basis data waktu nyata memproses transaksi dengan cukup cepat agar hasilnya kembali dan segera ditindaklanjuti.
Basis data spasial dapat menyimpan data dengan fitur multidimensi. Kueri pada data tersebut mencakup kueri berbasis lokasi, seperti "Di mana hotel terdekat di wilayah saya?".
Basis data temporal memiliki aspek waktu bawaan, misalnya model data temporal dan versi temporal SQL . Lebih khusus lagi, aspek temporal biasanya mencakup waktu valid dan waktu transaksi.
Database berorientasi terminologi dibangun di atas database berorientasi objek , sering disesuaikan untuk bidang tertentu.
Basis data data tidak terstruktur dimaksudkan untuk menyimpan beragam objek dengan cara yang dapat dikelola dan dilindungi yang tidak cocok secara alami dan nyaman dalam basis data umum. Ini mungkin termasuk pesan email, dokumen, jurnal, objek multimedia, dll. Nama mungkin menyesatkan karena beberapa objek bisa sangat terstruktur. Namun, seluruh koleksi objek yang mungkin tidak sesuai dengan kerangka kerja terstruktur yang telah ditentukan sebelumnya. Sebagian besar DBMS yang sudah mapan sekarang mendukung data tidak terstruktur dalam berbagai cara, dan DBMS baru yang berdedikasi sedang bermunculan.
Sistem manajemen basis data
Connolly dan Begg mendefinisikan sistem manajemen basis data (DBMS) sebagai "sistem perangkat lunak yang memungkinkan pengguna untuk mendefinisikan, membuat, memelihara, dan mengontrol akses ke basis data". [24] Contoh DBMS termasuk MySQL , PostgreSQL , Microsoft SQL Server , Oracle Database , dan Microsoft Access .

Akronim DBMS terkadang diperluas untuk menunjukkan model basis data yang mendasarinya , dengan RDBMS untuk relasional , OODBMS untuk objek (berorientasi) dan ORDBMS untuk model relasional objek . Ekstensi lain dapat menunjukkan beberapa karakteristik lain, seperti DDBMS untuk sistem manajemen basis data terdistribusi.

Fungsionalitas yang disediakan oleh DBMS dapat sangat bervariasi. Fungsionalitas inti adalah penyimpanan, pengambilan, dan pembaruan data. Codd mengusulkan fungsi dan layanan berikut yang harus disediakan oleh DBMS tujuan umum yang lengkap: [25]

Penyimpanan, pengambilan, dan pembaruan data
Katalog atau kamus data yang dapat diakses pengguna yang menjelaskan metadata
Dukungan untuk transaksi dan konkurensi
Fasilitas untuk memulihkan database jika rusak
Dukungan untuk otorisasi akses dan pembaruan data
Akses dukungan dari lokasi terpencil
Menegakkan batasan untuk memastikan data dalam database mematuhi aturan tertentu
Secara umum juga diharapkan DBMS akan menyediakan seperangkat utilitas untuk tujuan yang mungkin diperlukan untuk mengelola database secara efektif, termasuk utilitas impor, ekspor, pemantauan, defragmentasi, dan analisis. [26] Bagian inti dari DBMS yang berinteraksi antara database dan antarmuka aplikasi kadang-kadang disebut sebagai mesin database .

Seringkali DBMS akan memiliki parameter konfigurasi yang dapat disetel secara statis dan dinamis, misalnya jumlah maksimum memori utama pada server yang dapat digunakan database. Kecenderungannya adalah meminimalkan jumlah konfigurasi manual, dan untuk kasus seperti database tertanam , kebutuhan untuk menargetkan administrasi nol adalah yang terpenting.

DBMS perusahaan besar besar cenderung meningkat dalam ukuran dan fungsionalitas dan dapat melibatkan ribuan tahun upaya pengembangan manusia sepanjang masa hidup mereka. [sebuah]

DBMS multi-pengguna awal biasanya hanya mengizinkan aplikasi untuk berada di komputer yang sama dengan akses melalui terminal atau perangkat lunak emulasi terminal. Arsitektur client-server adalah pengembangan di mana aplikasi berada di desktop klien dan database di server memungkinkan pemrosesan untuk didistribusikan. Ini berkembang menjadi arsitektur multitier yang menggabungkan server aplikasi dan server web dengan antarmuka pengguna akhir melalui browser web dengan database hanya terhubung langsung ke tingkat yang berdekatan. [27]

DBMS tujuan umum akan menyediakan antarmuka pemrograman aplikasi publik (API) dan opsional prosesor untuk bahasa database seperti SQL untuk memungkinkan aplikasi yang akan ditulis untuk berinteraksi dengan dan memanipulasi database. DBMS tujuan khusus dapat menggunakan API pribadi dan secara khusus dikustomisasi dan ditautkan ke satu aplikasi. Misalnya, sistem email melakukan banyak fungsi DBMS tujuan umum seperti penyisipan pesan, penghapusan pesan, penanganan lampiran, pencarian daftar blokir, pengaitan pesan dengan alamat email dan sebagainya, namun fungsi ini terbatas pada apa yang diperlukan untuk menangani surel.

Aplikasi
Artikel utama: Aplikasi basis data
Interaksi eksternal dengan database akan melalui program aplikasi yang berinteraksi dengan DBMS. [28] Ini dapat berkisar dari alat database yang memungkinkan pengguna untuk mengeksekusi kueri SQL secara tekstual atau grafis, hingga situs web yang kebetulan menggunakan database untuk menyimpan dan mencari informasi.

Antarmuka program aplikasi
Seorang programmer akan mengkodekan interaksi ke database (kadang-kadang disebut sebagai sumber data ) melalui antarmuka program aplikasi (API) atau melalui bahasa database . API atau bahasa tertentu yang dipilih perlu didukung oleh DBMS, mungkin secara tidak langsung melalui praprosesor atau API penghubung. Beberapa tujuan API untuk menjadi database independen, ODBC menjadi contoh yang umum dikenal. API umum lainnya termasuk JDBC dan ADO.NET .

Bahasa basis data
Bahasa database adalah bahasa tujuan khusus, yang memungkinkan satu atau lebih dari tugas-tugas berikut, kadang-kadang dibedakan sebagai subbahasa :

Bahasa kontrol data (DCL) – mengontrol akses ke data;
Bahasa definisi data (DDL) – mendefinisikan tipe data seperti membuat, mengubah, atau menjatuhkan tabel dan hubungan di antara mereka;
Bahasa manipulasi data (DML) – melakukan tugas seperti memasukkan, memperbarui, atau menghapus kejadian data;
Data query language (DQL) – memungkinkan pencarian informasi dan komputasi informasi turunan.
Bahasa database khusus untuk model data tertentu. Contoh penting meliputi:

SQL menggabungkan peran definisi data, manipulasi data, dan kueri dalam satu bahasa. Itu adalah salah satu bahasa komersial pertama untuk model relasional, meskipun dalam beberapa hal menyimpang dari model relasional seperti yang dijelaskan oleh Codd (misalnya, baris dan kolom tabel dapat dipesan). SQL menjadi standar dari American National Standards Institute (ANSI) pada tahun 1986, dan Organisasi Internasional untuk Standardisasi (ISO) pada tahun 1987. Standar telah ditingkatkan secara teratur sejak dan didukung (dengan berbagai tingkat kesesuaian) oleh semua komersial utama DBMS relasional. [29] [30]
OQL adalah standar bahasa model objek (dari Grup Manajemen Data Objek ). Ini telah mempengaruhi desain beberapa bahasa query yang lebih baru seperti JDOQL dan EJB QL .
XQuery adalah bahasa query XML standar yang diimplementasikan oleh sistem database XML seperti MarkLogic dan eXist , oleh database relasional dengan kemampuan XML seperti Oracle dan Db2, dan juga oleh prosesor XML dalam memori seperti Saxon .
SQL/XML menggabungkan XQuery dengan SQL. [31]
Bahasa database juga dapat menggabungkan fitur-fitur seperti:

Konfigurasi khusus DBMS dan manajemen mesin penyimpanan
Komputasi untuk mengubah hasil kueri, seperti penghitungan, penjumlahan, rata-rata, pengurutan, pengelompokan, dan referensi silang
Penegakan kendala (misalnya dalam database otomotif, hanya mengizinkan satu jenis mesin per mobil)
Versi antarmuka pemrograman aplikasi dari bahasa kueri, untuk kenyamanan programmer
Penyimpanan
Artikel utama: Penyimpanan data komputer dan mesin Database
Penyimpanan basis data adalah wadah perwujudan fisik basis data. Ini terdiri dari tingkat internal ( fisik) dalam arsitektur database. Ini juga berisi semua informasi yang dibutuhkan (misalnya, metadata , "data tentang data", dan struktur data internal ) untuk merekonstruksi tingkat konseptual dan tingkat eksternal dari tingkat internal bila diperlukan. Basis data sebagai objek digital mengandung tiga lapisan informasi yang harus disimpan: data, struktur, dan semantik. Penyimpanan yang tepat dari ketiga lapisan diperlukan untuk pelestarian masa depan dan umur panjang database. [32]Memasukkan data ke penyimpanan permanen umumnya merupakan tanggung jawab mesin basis data alias "mesin penyimpanan". Meskipun biasanya diakses oleh DBMS melalui sistem operasi yang mendasarinya (dan sering menggunakan sistem file sistem operasisebagai perantara untuk tata letak penyimpanan), properti penyimpanan dan pengaturan konfigurasi sangat penting untuk operasi DBMS yang efisien, dan dengan demikian dipelihara secara ketat oleh administrator basis data. Sebuah DBMS, saat beroperasi, selalu memiliki database yang berada di beberapa jenis penyimpanan (misalnya, memori dan penyimpanan eksternal). Data database dan informasi tambahan yang dibutuhkan, mungkin dalam jumlah yang sangat besar, dikodekan ke dalam bit. Data biasanya berada di penyimpanan dalam struktur yang terlihat sangat berbeda dari cara data melihat tingkat konseptual dan eksternal, tetapi dengan cara yang mencoba untuk mengoptimalkan (yang terbaik) rekonstruksi tingkat ini saat dibutuhkan oleh pengguna dan program, serta seperti untuk menghitung jenis informasi tambahan yang dibutuhkan dari data (misalnya, saat menanyakan database).

Beberapa DBMS mendukung untuk menentukan pengkodean karakter mana yang digunakan untuk menyimpan data, sehingga beberapa penyandian dapat digunakan dalam database yang sama.

Berbagai struktur penyimpanan database tingkat rendah digunakan oleh mesin penyimpanan untuk membuat serial model data sehingga dapat ditulis ke media pilihan. Teknik seperti pengindeksan dapat digunakan untuk meningkatkan kinerja. Penyimpanan konvensional berorientasi pada baris, tetapi ada juga database yang berorientasi kolom dan korelasi .

Tampilan terwujud
Artikel utama: Tampilan terwujud
Seringkali redundansi penyimpanan digunakan untuk meningkatkan kinerja. Contoh umum adalah menyimpan tampilan terwujud , yang terdiri dari tampilan eksternal atau hasil kueri yang sering dibutuhkan. Menyimpan tampilan seperti itu menghemat komputasi yang mahal setiap kali dibutuhkan. Kelemahan dari tampilan yang terwujud adalah biaya tambahan yang dikeluarkan saat memperbaruinya agar tetap sinkron dengan data database asli yang diperbarui, dan biaya redundansi penyimpanan.

Replikasi
Lihat juga: Replikasi (komputasi) Replikasi basis data
Kadang-kadang database menggunakan redundansi penyimpanan dengan replikasi objek database (dengan satu atau lebih salinan) untuk meningkatkan ketersediaan data (keduanya untuk meningkatkan kinerja beberapa akses pengguna akhir secara simultan ke objek database yang sama, dan untuk memberikan ketahanan dalam kasus kegagalan sebagian dari database terdistribusi). Pembaruan objek yang direplikasi perlu disinkronkan di seluruh salinan objek. Dalam banyak kasus, seluruh database direplikasi.

Keamanan
Keamanan basis data berkaitan dengan semua aspek yang berbeda untuk melindungi konten basis data, pemiliknya, dan penggunanya. Ini berkisar dari perlindungan dari penggunaan database yang tidak sah yang disengaja hingga akses database yang tidak disengaja oleh entitas yang tidak berwenang (misalnya, seseorang atau program komputer).

Kontrol akses basis data berkaitan dengan pengendalian siapa (seseorang atau program komputer tertentu) yang diizinkan untuk mengakses informasi apa dalam basis data. Informasi tersebut dapat terdiri dari objek database tertentu (misalnya, jenis catatan, catatan tertentu, struktur data), perhitungan tertentu atas objek tertentu (misalnya, jenis kueri, atau kueri tertentu), atau menggunakan jalur akses khusus ke yang sebelumnya (misalnya, menggunakan indeks tertentu). atau struktur data lainnya untuk mengakses informasi). Kontrol akses basis data ditetapkan oleh personel yang diberi wewenang khusus (oleh pemilik basis data) yang menggunakan antarmuka DBMS keamanan khusus yang dilindungi.

Ini dapat dikelola secara langsung berdasarkan individu, atau dengan penugasan individu dan hak istimewa kepada kelompok, atau (dalam model yang paling rumit) melalui penugasan individu dan kelompok untuk peran yang kemudian diberikan hak. Keamanan data mencegah pengguna yang tidak berwenang melihat atau memperbarui database. Dengan menggunakan kata sandi, pengguna diizinkan mengakses seluruh basis data atau bagian darinya yang disebut "subskema". Misalnya, database karyawan dapat berisi semua data tentang karyawan individu, tetapi satu kelompok pengguna dapat diizinkan untuk hanya melihat data penggajian, sementara yang lain hanya diizinkan mengakses riwayat pekerjaan dan data medis. Jika DBMS menyediakan cara untuk memasukkan dan memperbarui database secara interaktif, serta menginterogasinya, kemampuan ini memungkinkan untuk mengelola database pribadi.

Keamanan data secara umum berkaitan dengan melindungi potongan data tertentu, baik secara fisik (yaitu, dari korupsi, atau perusakan, atau penghapusan; misalnya, lihat keamanan fisik ), atau interpretasinya, atau bagiannya menjadi informasi yang berarti (misalnya, oleh melihat string bit yang terdiri, menyimpulkan nomor kartu kredit tertentu yang valid, misalnya, lihat enkripsi data ).

Ubah dan akses catatan logging siapa yang mengakses atribut mana, apa yang diubah, dan kapan diubah. Layanan logging memungkinkan untuk audit database forensik nanti dengan menyimpan catatan kejadian akses dan perubahan. Terkadang kode tingkat aplikasi digunakan untuk merekam perubahan daripada meninggalkannya di database. Pemantauan dapat diatur untuk mencoba mendeteksi pelanggaran keamanan. Oleh karena itu, organisasi harus memperhatikan keamanan database dengan serius karena banyak manfaat yang diberikannya. Organisasi akan dilindungi dari pelanggaran keamanan dan aktivitas peretasan seperti intrusi firewall, penyebaran virus, dan ransom ware. Ini membantu melindungi informasi penting perusahaan, yang tidak dapat dibagikan dengan pihak luar dengan alasan apa pun.
Transaksi dan konkurensi
Informasi lebih lanjut: Kontrol konkurensi
Transaksi database dapat digunakan untuk memperkenalkan beberapa tingkat toleransi kesalahan dan integritas data setelah pemulihan dari kerusakan . Transaksi basis data adalah unit kerja, biasanya merangkum sejumlah operasi di atas basis data (misalnya, membaca objek basis data, menulis, memperoleh atau melepaskan kunci , dll.), abstraksi yang didukung dalam basis data dan juga sistem lainnya. Setiap transaksi memiliki batasan yang jelas dalam hal eksekusi program/kode mana yang termasuk dalam transaksi tersebut (ditentukan oleh pemrogram transaksi melalui perintah transaksi khusus).

Akronim ACID menjelaskan beberapa properti ideal dari transaksi basis data: atomisitas , konsistensi , isolasi , dan daya tahan .

Migrasi
Lihat juga: Migrasi data Migrasi basis data
Sebuah database yang dibangun dengan satu DBMS tidak portabel untuk DBMS lain (yaitu, DBMS lain tidak dapat menjalankannya). Namun, dalam beberapa situasi, diinginkan untuk memindahkan database dari satu DBMS ke yang lain. Alasan utamanya adalah ekonomis (DBMS yang berbeda mungkin memiliki total biaya kepemilikan yang berbedaatau TCO), fungsional, dan operasional (DBMS yang berbeda mungkin memiliki kemampuan yang berbeda). Migrasi melibatkan transformasi database dari satu tipe DBMS ke tipe lainnya. Transformasi harus memelihara (jika mungkin) aplikasi terkait database (yaitu, semua program aplikasi terkait) tetap utuh. Dengan demikian, tingkat arsitektur konseptual dan eksternal database harus dipertahankan dalam transformasi. Mungkin diinginkan juga bahwa beberapa aspek dari tingkat internal arsitektur dipertahankan. Migrasi database yang kompleks atau besar mungkin merupakan proyek yang rumit dan mahal (satu kali) dengan sendirinya, yang harus diperhitungkan dalam keputusan untuk bermigrasi. Ini terlepas dari kenyataan bahwa alat mungkin ada untuk membantu migrasi antara DBMS tertentu. Biasanya, vendor DBMS menyediakan alat untuk membantu mengimpor database dari DBMS populer lainnya.

Membangun, memelihara, dan menyetel
Artikel utama: Penyetelan basis data
Setelah merancang database untuk suatu aplikasi, tahap selanjutnya adalah membangun database. Biasanya, DBMS tujuan umum yang sesuai dapat dipilih untuk digunakan untuk tujuan ini. Sebuah DBMS menyediakan antarmuka pengguna yang diperlukan untuk digunakan oleh administrator database untuk menentukan struktur data aplikasi yang dibutuhkan dalam model data masing-masing DBMS. Antarmuka pengguna lain digunakan untuk memilih parameter DBMS yang diperlukan (seperti terkait keamanan, parameter alokasi penyimpanan, dll.).

Ketika database sudah siap (semua struktur data dan komponen lain yang diperlukan telah ditentukan), biasanya diisi dengan data aplikasi awal (inisialisasi database, yang biasanya merupakan proyek yang berbeda; dalam banyak kasus menggunakan antarmuka DBMS khusus yang mendukung penyisipan massal) sebelum menjadikannya operasional. Dalam beberapa kasus, database menjadi operasional saat kosong dari data aplikasi, dan data terakumulasi selama operasinya.

Setelah database dibuat, diinisialisasi dan diisi, perlu dipelihara. Berbagai parameter database mungkin perlu diubah dan database mungkin perlu disetel ( tuning ) untuk kinerja yang lebih baik; struktur data aplikasi dapat diubah atau ditambahkan, program aplikasi terkait baru dapat ditulis untuk menambah fungsionalitas aplikasi, dll.

Cadangkan dan pulihkan
Artikel utama: Cadangan
Kadang-kadang diinginkan untuk mengembalikan database ke keadaan sebelumnya (karena berbagai alasan, misalnya, kasus ketika database ditemukan rusak karena kesalahan perangkat lunak, atau jika telah diperbarui dengan data yang salah). Untuk mencapai hal ini, operasi pencadangan dilakukan sesekali atau terus-menerus, di mana setiap keadaan basis data yang diinginkan (yaitu, nilai datanya dan penyematannya dalam struktur data basis data) disimpan dalam file cadangan khusus (ada banyak teknik untuk melakukan ini secara efektif). Ketika diputuskan oleh administrator database untuk membawa database kembali ke keadaan ini (misalnya, dengan menentukan keadaan ini dengan titik waktu yang diinginkan ketika database berada dalam keadaan ini), file-file ini digunakan untuk memulihkan keadaan itu.

Analisis statis
Teknik analisis statis untuk verifikasi perangkat lunak dapat diterapkan juga dalam skenario bahasa query. Secara khusus, * Kerangka interpretasi abstrak telah diperluas ke bidang bahasa kueri untuk database relasional sebagai cara untuk mendukung teknik perkiraan suara. [34] Semantik bahasa query dapat disetel sesuai dengan abstraksi yang sesuai dari domain konkret data. Abstraksi sistem database relasional memiliki banyak aplikasi yang menarik, khususnya, untuk tujuan keamanan, seperti kontrol akses yang halus, watermarking, dll.

Fitur lain-lain
Fitur DBMS lainnya mungkin termasuk:

Log basis data – Ini membantu menyimpan riwayat fungsi yang dijalankan.
Komponen grafik untuk menghasilkan grafik dan bagan, terutama dalam sistem gudang data.
Pengoptimal kueri – Melakukan optimisasi kueri pada setiap kueri untuk memilih rencana kueri yang efisien (urutan parsial (pohon) operasi) yang akan dieksekusi untuk menghitung hasil kueri. Mungkin khusus untuk mesin penyimpanan tertentu.
Alat atau kait untuk desain basis data, pemrograman aplikasi, pemeliharaan program aplikasi, analisis dan pemantauan kinerja basis data, pemantauan konfigurasi basis data, konfigurasi perangkat keras DBMS (DBMS dan basis data terkait dapat menjangkau komputer, jaringan, dan unit penyimpanan) dan pemetaan basis data terkait (terutama untuk DBMS terdistribusi), alokasi penyimpanan dan pemantauan tata letak basis data, migrasi penyimpanan, dll.
Semakin banyak, ada panggilan untuk sistem tunggal yang menggabungkan semua fungsi inti ini ke dalam kerangka pembangunan, pengujian, dan penyebaran yang sama untuk manajemen basis data dan kontrol sumber. Meminjam dari perkembangan lain dalam industri perangkat lunak, beberapa menawarkan penawaran seperti " DevOps untuk database". [35]

Desain dan pemodelan
Artikel utama: Desain basis data
Proses desain database v2.png
Tugas pertama perancang basis data adalah menghasilkan model data konseptual yang mencerminkan struktur informasi yang akan disimpan dalam basis data. Pendekatan umum untuk ini adalah mengembangkan model hubungan entitas , seringkali dengan bantuan alat gambar. Pendekatan populer lainnya adalah Unified Modeling Language. Model data yang berhasil akan secara akurat mencerminkan kemungkinan keadaan dunia luar yang dimodelkan: misalnya, jika orang dapat memiliki lebih dari satu nomor telepon, itu akan memungkinkan informasi ini ditangkap. Merancang model data konseptual yang baik membutuhkan pemahaman yang baik tentang domain aplikasi; biasanya melibatkan mengajukan pertanyaan mendalam tentang hal-hal yang menarik bagi suatu organisasi, seperti "dapatkah pelanggan juga menjadi pemasok?", Atau "jika suatu produk dijual dengan dua bentuk kemasan yang berbeda, apakah itu produk yang sama atau produk yang berbeda? ", atau "jika sebuah pesawat terbang dari New York ke Dubai melalui Frankfurt, apakah itu satu atau dua penerbangan (atau bahkan mungkin tiga)?". Jawaban atas pertanyaan-pertanyaan ini menetapkan definisi terminologi yang digunakan untuk entitas (pelanggan, produk, penerbangan,

Memproduksi model data konseptual terkadang melibatkan masukan dari proses bisnis , atau analisis alur kerja dalam organisasi. Ini dapat membantu untuk menetapkan informasi apa yang dibutuhkan dalam database, dan apa yang dapat ditinggalkan. Misalnya, ini dapat membantu ketika memutuskan apakah database perlu menyimpan data historis serta data saat ini.

Setelah menghasilkan model data konseptual yang disukai pengguna, tahap selanjutnya adalah menerjemahkannya ke dalam skema yang mengimplementasikan struktur data yang relevan di dalam database. Proses ini sering disebut desain database logis, dan outputnya adalah model data logis yang dinyatakan dalam bentuk skema. Sedangkan model data konseptual (dalam teori setidaknya) independen dari pilihan teknologi database, model data logis akan dinyatakan dalam model database tertentu yang didukung oleh DBMS yang dipilih. (Istilah model data dan model basis data sering digunakan secara bergantian, tetapi dalam artikel ini kami menggunakan model data untuk desain basis data tertentu, dan model basis datauntuk notasi pemodelan yang digunakan untuk mengekspresikan desain itu).

Model database yang paling populer untuk database tujuan umum adalah model relasional, atau lebih tepatnya, model relasional yang diwakili oleh bahasa SQL. Proses pembuatan desain database logis menggunakan model ini menggunakan pendekatan metodis yang dikenal sebagai normalisasi . Tujuan normalisasi adalah untuk memastikan bahwa setiap "fakta" dasar hanya dicatat di satu tempat, sehingga penyisipan, pembaruan, dan penghapusan secara otomatis menjaga konsistensi.

Tahap akhir dari desain database adalah membuat keputusan yang mempengaruhi kinerja, skalabilitas, pemulihan, keamanan, dan sejenisnya, yang bergantung pada DBMS tertentu. Ini sering disebut desain database fisik , dan outputnya adalah model data fisik . Tujuan utama selama tahap ini adalah kemandirian data , yang berarti bahwa keputusan yang dibuat untuk tujuan pengoptimalan kinerja harus tidak terlihat oleh pengguna akhir dan aplikasi. Ada dua jenis independensi data: independensi data fisik dan independensi data logis. Desain fisik didorong terutama oleh persyaratan kinerja, dan membutuhkan pengetahuan yang baik tentang beban kerja yang diharapkan dan pola akses, dan pemahaman mendalam tentang fitur yang ditawarkan oleh DBMS yang dipilih.

Aspek lain dari desain database fisik adalah keamanan. Ini melibatkan baik mendefinisikan kontrol akses ke objek database serta mendefinisikan tingkat keamanan dan metode untuk data itu sendiri.
Model
Artikel utama: Model basis data

Kolase dari lima jenis model database
Model database adalah jenis model data yang menentukan struktur logis dari database dan secara fundamental menentukan cara data dapat disimpan, diatur, dan dimanipulasi. Contoh paling populer dari model database adalah model relasional (atau pendekatan SQL dari relasional), yang menggunakan format berbasis tabel.

Model data logis umum untuk database meliputi:

Database navigasi
Model basis data hierarkis
Model jaringan
Basis data grafik
Model relasional
Model hubungan entitas
Model hubungan entitas yang disempurnakan
Model objek
Model dokumen
Model entitas–atribut–nilai
Skema bintang
Sebuah database objek-relasional menggabungkan dua struktur terkait.

Model data fisik meliputi:

Indeks terbalik
File datar
Model lainnya termasuk:

Model multidimensi
Model susunan
Model multinilai
Model khusus dioptimalkan untuk jenis data tertentu:

basis data XML
Model semantik
Toko konten
Toko acara
Model deret waktu
Pandangan eksternal, konseptual, dan internal

Tampilan data tradisional [36]
Sistem manajemen basis data menyediakan tiga tampilan data basis data:

Tingkat eksternal mendefinisikan bagaimana setiap kelompok pengguna akhir melihat organisasi data dalam database. Sebuah database tunggal dapat memiliki sejumlah tampilan di tingkat eksternal.
Tingkat konseptual menyatukan berbagai pandangan eksternal ke dalam pandangan global yang kompatibel. [37] Ini memberikan sintesis dari semua pandangan eksternal. Ini berada di luar jangkauan berbagai pengguna akhir basis data, dan lebih menarik bagi pengembang aplikasi basis data dan administrator basis data.
Tingkat internal (atau tingkat fisik ) adalah organisasi internal data di dalam DBMS. Hal ini berkaitan dengan biaya, kinerja, skalabilitas dan hal-hal operasional lainnya. Ini berkaitan dengan tata letak penyimpanan data, menggunakan struktur penyimpanan seperti indeks untuk meningkatkan kinerja. Kadang-kadang menyimpan data pandangan individu (tampilan terwujud ), dihitung dari data umum, jika ada pembenaran kinerja untuk redundansi tersebut. Ini menyeimbangkan semua persyaratan kinerja tampilan eksternal, mungkin bertentangan, dalam upaya untuk mengoptimalkan kinerja keseluruhan di semua aktivitas.
Meskipun biasanya hanya ada satu tampilan data konseptual (atau logis) dan fisik (atau internal), ada sejumlah tampilan eksternal yang berbeda. Hal ini memungkinkan pengguna untuk melihat informasi database dengan cara yang lebih terkait dengan bisnis daripada dari sudut pandang pemrosesan teknis. Misalnya, departemen keuangan perusahaan memerlukan rincian pembayaran semua karyawan sebagai bagian dari pengeluaran perusahaan, tetapi tidak memerlukan rincian tentang karyawan yang menjadi kepentingan departemen sumber daya manusia . Jadi departemen yang berbeda membutuhkan pandangan yang berbeda dari database perusahaan.

Arsitektur database tiga tingkat berhubungan dengan konsep independensi data yang merupakan salah satu kekuatan pendorong awal utama dari model relasional. Idenya adalah bahwa perubahan yang dibuat pada tingkat tertentu tidak mempengaruhi pandangan pada tingkat yang lebih tinggi. Misalnya, perubahan di tingkat internal tidak memengaruhi program aplikasi yang ditulis menggunakan antarmuka tingkat konseptual, yang mengurangi dampak pembuatan perubahan fisik untuk meningkatkan kinerja.

Pandangan konseptual memberikan tingkat tipuan antara internal dan eksternal. Di satu sisi menyediakan pandangan umum dari database, independen dari struktur tampilan eksternal yang berbeda, dan di sisi lain itu mengabstraksikan detail tentang bagaimana data disimpan atau dikelola (tingkat internal). Pada prinsipnya setiap level, dan bahkan setiap tampilan eksternal, dapat disajikan dengan model data yang berbeda. Dalam prakteknya biasanya DBMS yang diberikan menggunakan model data yang sama untuk tingkat eksternal dan konseptual (misalnya, model relasional). Level internal, yang tersembunyi di dalam DBMS dan bergantung pada implementasinya, memerlukan level detail yang berbeda dan menggunakan tipe tipe struktur datanya sendiri.

Memisahkan tingkat eksternal , konseptual dan internal adalah fitur utama dari implementasi model database relasional yang mendominasi database abad ke-21. [37]

Riset
Teknologi basis data telah menjadi topik penelitian aktif sejak tahun 1960-an, baik di bidang akademis maupun dalam kelompok penelitian dan pengembangan perusahaan (misalnya IBM Research ). Kegiatan penelitian meliputi teori dan pengembangan prototipe . Topik penelitian penting telah menyertakan model , konsep transaksi atom, teknik kontrol konkurensi terkait, bahasa kueri dan metode pengoptimalan kueri , RAID , dan banyak lagi.

Area penelitian basis data memiliki beberapa jurnal akademik khusus (misalnya, Transaksi ACM pada Sistem Basis Data -TODS, Teknik Data dan Pengetahuan -DKE) dan konferensi tahunan (misalnya, ACM SIGMOD , ACM PODS , VLDB , IEEE ICDE).

